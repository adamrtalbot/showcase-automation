name: showcase-autotest
run-name: run-pipelines
on:
  workflow_dispatch:
    inputs:
      dryrun:
        description: "Dryrun (do not submit pipeline)"
        default: false
        type: boolean
        required: false
      timer:
        description: "Environment"
        default: delay120mins
        type: choice
        options:
          - noDelay
          - delay1mins
          - delay5mins
          - delay15mins
          - delay30mins
          - delay60mins
          - delay120mins
          - delay360mins
          - waitForReviewer
      slack:
        description: Slack hook
        type: boolean
        required: false
        default: true
      remove:
        description: Delete run
        default: true
        type: boolean
        required: false

  schedule:
    # Every 2am on Friday and Monday
    - cron: "0 2 * * *"

jobs:
  getdate:
    runs-on: ubuntu-latest
    steps:
      - name: "Get current date"
        run: |
          set -euxo pipefail
          echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
        id: date
    outputs:
      date: ${{ steps.date.outputs.date }}

  runtest:
    runs-on: ubuntu-latest
    name: ${{ matrix.pipeline.name }}.${{ matrix.compute_env.name }}
    needs: getdate
    continue-on-error: true
    outputs:
      runname: ${{ steps.id.outputs.name }}
      workspace: ${{ steps.id.outputs.workspace }}
    strategy:
      matrix:
        pipeline:
          - { name: hello, url: hello, rev: master, latest: true, profiles: "" }
          - {
              name: rnaseq,
              url: nf-core-rnaseq,
              rev: "3.11.1",
              latest: true,
              profiles: "test",
            }
          - {
              name: viralrecon,
              url: nf-core-viralrecon-illumina,
              rev: "2.6.0",
              latest: true,
              profiles: "test",
            }
          - {
              name: sarek,
              url: nf-core-sarek,
              rev: "3.1.2",
              latest: true,
              profiles: "test",
            }
        compute_env:
          - {
              name: aws,
              ref: seqera_aws_ireland_fusionv2_nvme,
              workdir: "s3://seqeralabs-showcase",
              workspace_id: "138659136604200",
            }
          - {
              name: azure,
              ref: seqera_azure_virginia,
              workdir: "az://seqeralabs-showcase",
              workspace_id: "138659136604200",
            }
          - {
              name: gcp,
              ref: seqera_gcp_london,
              workdir: "gs://seqeralabs-showcase",
              workspace_id: "138659136604200",
            }
        include:
          - compute_env:
              {
                name: aws,
                ref: seqera_aws_ireland_fusionv2_nvme,
                workdir: "s3://seqeralabs-showcase",
                workspace_id: "138659136604200",
              }
            pipeline:
              {
                name: sentieon,
                url: nf-sentieon,
                rev: "master",
                latest: true,
                profiles: "test",
              }

    steps:
      - name: "export unique run name"
        run: |
          set -euxo pipefail
          echo "name=${{ matrix.pipeline.name }}_${{ matrix.compute_env.name }}_${{ needs.getdate.outputs.date }}_$(uuidgen | cut -c 1-8)" >> $GITHUB_OUTPUT
          echo "workspace=${{ matrix.compute_env.workspace_id }}" >> $GITHUB_OUTPUT
        id: id

      - uses: seqeralabs/action-tower-launch@v1.2.0
        if: ${{ !inputs.dryrun }}
        with:
          pipeline: ${{ matrix.pipeline.url }}
          workspace_id: ${{ steps.id.outputs.workspace }}
          access_token: ${{ secrets.TOWER_ACCESS_TOKEN }}
          compute_env: ${{ matrix.compute_env.ref }}
          workdir: "${{ matrix.compute_env.workdir }}/work/${{ matrix.pipeline.name }}/work-${{ needs.getdate.outputs.date }}"
          run_name: "${{ steps.id.outputs.name }}"
          revision: "${{ matrix.pipeline.rev }}"
          profiles: ${{ matrix.pipeline.profiles }}
          wait: SUBMITTED
          parameters: |
            {
                "outdir": "${{ matrix.compute_env.workdir }}/${{ matrix.pipeline.name }}/results-test-${{ needs.getdate.outputs.date }}"
            }

      - name: "store run name"
        if: success()
        run: |
          set -euxo pipefail
          echo '{ "name": "${{ steps.id.outputs.name }}", "workspace": "${{ steps.id.outputs.workspace }}", "pipeline": "${{ matrix.pipeline.url }}" }' >> ${{ steps.id.outputs.name }}_${{ steps.id.outputs.workspace }}_${{ needs.getdate.outputs.date }}.json

      - uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: ${{ needs.getdate.outputs.date }}_run_details
          path: "${{ steps.id.outputs.name }}_${{ steps.id.outputs.workspace }}_${{ needs.getdate.outputs.date }}.json"

      - uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: ${{ matrix.pipeline.name }}_${{ matrix.compute_env.name }}_log
          path: tower_action_*.log

  checkmatrix:
    runs-on: ubuntu-latest
    needs: [runtest, getdate]
    continue-on-error: true
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ needs.getdate.outputs.date }}_run_details
          path: run_details

      - name: "stage matrix"
        run: |
          set -euxo pipefail
          echo "matrix=$(cat run_details/* | jq -c --slurp .)" >> $GITHUB_OUTPUT
        id: matrix

  checkrun:
    runs-on: ubuntu-latest
    needs: [getdate, checkmatrix]
    continue-on-error: true
    environment: ${{ inputs.timer || 'delay360mins' }}
    env:
      TOWER_ACCESS_TOKEN: ${{ secrets.TOWER_ACCESS_TOKEN }}
      TOWER_WORKSPACE_ID: ${{ matrix.includes.workspace }}
    strategy:
      matrix:
        includes: ${{ fromJSON(needs.checkmatrix.outputs.matrix) }}

    steps:
      - name: "print matrix input"
        run: |
          set -euxo pipefail
          echo "${{ toJSON(matrix) }}"

      - name: Install tw CLI
        run: |
          set -euxo pipefail
          wget -L https://github.com/seqeralabs/tower-cli/releases/download/v0.7.3/tw-0.7.3-linux-x86_64
          mv tw-* tw
          chmod +x tw
          sudo mv tw /usr/local/bin/

      - name: get ID
        if: ${{ !inputs.dryrun }}
        id: id
        run: |
          set -euxo pipefail
          export DETAILS=$(tw -o json runs list --workspace ${{ matrix.includes.workspace }} --filter ${{ matrix.includes.name }})
          echo $DETAILS
          export ID=$(echo $DETAILS | jq -r '.workflows[].workflow.id')
          export WORKSPACE=$(echo $DETAILS | jq -r '.workspaceRef')
          echo "Run ID: $ID"
          echo "WorkspaceRef: $WORKSPACE"
          echo "id=$ID" >> $GITHUB_OUTPUT
          echo "workspaceRef=$WORKSPACE" >> $GITHUB_OUTPUT

      - name: Get info
        if: ${{ !inputs.dryrun }}
        id: info
        run: |
          set -euxo pipefail
          tw -o json runs view -w ${{ matrix.includes.workspace }} -i ${{ steps.id.outputs.id }} | jq -r '.general |= . + { "workspace": "${{ steps.id.outputs.workspaceRef }}", "pipeline": "${{ matrix.includes.pipeline }}" }' > ${{ matrix.includes.name }}_${{ matrix.includes.workspace }}_${{ needs.getdate.outputs.date }}.json

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.getdate.outputs.date }}_all_runs
          path: "${{ matrix.includes.name }}_${{ matrix.includes.workspace }}_${{ needs.getdate.outputs.date }}.json"

      - name: Clearup
        if: ${{ (inputs.remove || true) && !inputs.dryrun }}
        run: |
          set -euxo pipefail
          STATUS=$(tw -o json runs view -w ${{ matrix.includes.workspace }} -i ${{ steps.id.outputs.id }} | jq -r '.general.status')
          if [ "SUCCEEDED" = $STATUS ]; then
            # Won't delete if run is active
            tw -o json runs delete -w ${{ matrix.includes.workspace }} -i ${{ steps.id.outputs.id }}
          else
            echo "Run has not finished, delete with 'tw -o json runs delete -w ${{ matrix.includes.workspace }} -i ${{ steps.id.outputs.id }}' when ready."
          fi

  slack:
    runs-on: ubuntu-latest
    needs: [getdate, checkrun]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ needs.getdate.outputs.date }}_all_runs
          path: runs

      - name: "Slack"
        if: ${{ inputs.slack || true }}
        run: |
          set -euxo pipefail
          ls -1 runs/*
          cat runs/* | jq -r --slurp
          export MESSAGE=$(cat runs/* | jq -r --slurp '(["pipeline", "computeEnv", "workspace", "status"] | (., map(length*"-"))), (.[] | [.general.pipeline, .general.computeEnv, .general.workspace, .general.status]) | @tsv' | column -ts $'\t')
          echo $MESSAGE
          curl -X POST -H 'Content-type: application/json' --data "{'text': \"\`\`\`$MESSAGE\`\`\`\"}" ${{ secrets.SLACK_HOOK_URL }}
